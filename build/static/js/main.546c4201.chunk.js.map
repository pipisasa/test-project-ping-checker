{"version":3,"sources":["contexts/statistic.context.js","helpers/constants.js","components/layout/Navbar.js","components/layout/Layout.js","components/molecules/TasksCard.js","routes/pages/Home/Home.js","routes/pages/Ping/Ping.js","routes/pages/Statistics/StatisticsData.js","routes/pages/Statistics/Statistics.js","routes/Router.js","App.js","reportWebVitals.js","index.js"],"names":["statisticContext","createContext","StatisticProvider","props","data","totalSum","frequencyMap","Map","missed_items_count","state","statisticData","isStarted","socket","handleMessage","event","JSON","parse","value","set","get","length","parseInt","id","push","getMediana","sortedData","sort","a","b","middleIndex","Math","floor","getMod","res","entries","item","getStandardDeviation","average","sum","reduce","sqrt","toFixed","parseFloat","parseStatistic","startTime","Date","now","mediana","mod","standard_deviation","endTime","setState","totalCount","time_of_calculation","startStatistic","WebSocket","process","onopen","onmessage","bind","Provider","this","children","Component","Navbar","pathname","useLocation","className","classNames","active","to","Layout","TasksCard","title","subTitle","description","link","useState","isOpen","setIsOpen","Card","CardBody","Button","color","onClick","Collapse","Home","Container","Row","Col","md","Ping","url","setUrl","loading","setLoading","result","setResult","checkPing","useCallback","fetch","then","ping","catch","error","console","log","useCheckPing","Input","placeholder","onChange","e","target","disabled","StatisticsData","useContext","Statistics","Router","path","exact","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAGaA,EAAmBC,wBAAc,MAoG/BC,E,kDAjGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAMRC,KAAO,GAPW,EAQlBC,SAAW,EARO,EASlBC,aAAe,IAAIC,IATD,EAUlBC,mBAAqB,EAVH,EAYlBC,MAAQ,CACNC,cAAe,KACfC,WAAW,EACXC,OAAQ,MAfQ,EAkBlBC,cAAgB,SAACC,GACf,IAAMV,EAAOW,KAAKC,MAAMF,EAAMV,MAC9B,EAAKC,UAAYD,EAAKa,MACtB,EAAKX,aAAaY,IAAKd,EAAKa,OAAQ,EAAKX,aAAaa,IAAIf,EAAKa,QAAU,GAAK,GAC3E,EAAKb,KAAKgB,QAAUC,SAAS,EAAKjB,KAAK,EAAKA,KAAKgB,OAAO,GAAGE,IAAI,IAAMD,SAASjB,EAAKkB,KAAK,EAAKd,qBAChG,EAAKJ,KAAKmB,KAAKnB,IAvBC,EA0BlBoB,WAAa,WACX,IAAMC,EAAa,YAAI,EAAKrB,MAAMsB,MAAK,SAACC,EAAEC,GAAH,OAAOD,EAAEV,MAAMW,EAAEX,SAClDY,EAAcC,KAAKC,MAAMN,EAAWL,OAAO,GAEjD,OADgBK,EAAWL,OAAO,GAAKK,EAAWI,GAAaZ,MAAQQ,EAAWI,EAAY,GAAGZ,OAAO,EAAIQ,EAAWI,GAAaZ,OA7BpH,EAiClBe,OAAS,WAAK,IAAD,IACPC,EAAM,KADC,cAEO,EAAK3B,aAAa4B,WAFzB,IAEX,IAAI,EAAJ,qBAA8C,CAAC,IAArCC,EAAoC,UACxCF,GAAOA,EAAI,GAAKE,EAAK,MAAIF,EAAME,IAH1B,8BAKX,OAAU,QAAH,EAAAF,SAAA,eAAM,KAAM,GAtCH,EAyClBG,qBAAuB,SAACC,GACtB,IAAMC,EAAM,EAAKlC,KAAKmC,QAAO,SAACZ,EAAEC,GAAH,OAASD,EAAC,SAAIC,EAAEX,MAAMoB,EAAU,KAAG,GAC1DJ,EAAMH,KAAKU,KAAKF,EAAI,EAAKlC,KAAKgB,QAAQqB,QAAQ,GACpD,OAAOC,WAAWT,IA5CF,EA+ClBU,eAAiB,WACf,GAAI,EAAKvC,KAAKgB,OAAd,CACA,IAAMwB,EAAYC,KAAKC,MACjBT,EAAUK,YAAY,EAAKrC,SAAS,EAAKD,KAAKgB,QAAQqB,QAAQ,IAE9DM,EAAU,EAAKvB,aAEfwB,EAAM,EAAKhB,SAEXiB,EAAqB,EAAKb,qBAAqBC,GAE/Ca,EAAUL,KAAKC,MAErB,EAAKK,SAAS,CACZzC,cAAc,CACZ0C,WAAY,EAAKhD,KAAKgB,OACtB2B,UACAC,MACAX,UACAY,qBACAzC,mBAAoB,EAAKA,mBACzB6C,oBAAqBH,EAAUN,EAC/BvC,SAAU,EAAKA,cArEH,EA0ElBiD,eAAiB,WACf,EAAK1C,OAAS,IAAI2C,UCjFQC,gDDkF1B,EAAK5C,OAAO6C,OAAS,WACnB,EAAKN,SAAS,CACZxC,WAAW,KAGf,EAAKC,OAAO8C,UAAY,EAAK7C,eA/E7B,EAAKA,cAAgB,EAAKA,cAAc8C,KAAnB,gBACrB,EAAKL,eAAiB,EAAKA,eAAeK,KAApB,gBACtB,EAAKhB,eAAiB,EAAKA,eAAegB,KAApB,gBAJN,E,0CAoFlB,WACE,OAAO,cAAC3D,EAAiB4D,SAAlB,CAA2B3C,MAAO,CACvCN,UAAWkD,KAAKpD,MAAME,UACtBC,OAAQiD,KAAKpD,MAAMG,OACnBF,cAAemD,KAAKpD,MAAMC,cAC1B4C,eAAgBO,KAAKP,eACrBX,eAAgBkB,KAAKlB,gBALhB,SAOJkB,KAAK1D,MAAM2D,e,GA7FcC,a,+BEkBjBC,MAnBf,WAAmB,IACVC,EAAYC,cAAZD,SACP,OACE,qBAAKE,UAAU,eAAf,SACE,qBAAIA,UAAU,MAAd,UACE,oBAAIA,UAAWC,IAAW,WAAW,CAAEC,OAAmB,MAAXJ,IAA/C,SACE,cAAC,IAAD,CAAMK,GAAG,IAAIH,UAAU,WAAvB,oBAEF,oBAAIA,UAAWC,IAAW,WAAW,CAAEC,OAAmB,gBAAXJ,IAA/C,SACE,cAAC,IAAD,CAAMK,GAAG,cAAcH,UAAU,WAAjC,0BAEF,oBAAIA,UAAWC,IAAW,WAAW,CAAEC,OAAmB,UAAXJ,IAA/C,SACE,cAAC,IAAD,CAAMK,GAAG,QAAQH,UAAU,WAA3B,0BCFKI,MAXf,YAA+B,IAAbT,EAAY,EAAZA,SAChB,OACE,sBAAKK,UAAU,SAAf,UACE,cAAC,EAAD,IACA,sBAAM7C,GAAG,OAAO6C,UAAU,eAA1B,SACGL,Q,gECsBMU,MA1Bf,YAA2D,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,KAAO,EAC5BC,oBAAS,GADmB,mBACjDC,EADiD,KACzCC,EADyC,KAExD,OAEE,cAACC,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,WACE,6BAAKR,IACL,4BAAIC,IACJ,cAACQ,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,WAAKL,GAAWD,IAAjD,8DAGA,uBACA,uBACA,cAACO,EAAA,EAAD,CAAUP,OAAQA,EAAlB,SACGH,IAEH,cAAC,IAAD,CAAML,GAAIM,EAAV,SACE,cAACM,EAAA,EAAD,CAAQf,UAAU,QAAQgB,MAAM,UAAhC,kFCgEOG,MAjFf,WACE,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKtB,UAAU,eAAeuB,GAAI,EAAlC,SACE,cAAC,EAAD,CACEjB,MAAM,UACNC,SAAS,+DACTE,KAAK,cACLD,YAAc,qCACZ,8BACE,4EACA,uBAFF,snBAIyD,uBAJzD,y8BAQE,kFARF,0KASmB,uBATnB,4dAYE,qBAAIR,UAAU,WAAd,UACE,4EACA,iKACA,wTACA,4EACA,mSACA,oHAlBJ,otCAwBqB,wCAxBrB,8BAwB6C,uBAC3C,+BAAO,yLAET,iKACA,qBAAIA,UAAU,WAAd,UACE,wZACA,ucACA,8RACA,yhCAGA,8NAEF,wKACA,qBAAIA,UAAU,WAAd,UACE,+BAAI,mFAAJ,oRACA,+BAAI,sJAAJ,iMAKR,cAACsB,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC,EAAD,CACEjB,MAAM,UACNC,SAAS,qEACTE,KAAK,QACLD,YAAc,qCACZ,8BACE,2EADF,smBAMA,iKACA,oBAAIR,UAAU,WAAd,SACE,wiC,QCTDwB,MAjCf,WAAiB,IAAD,EACOd,mBAAS,IADhB,mBACPe,EADO,KACHC,EADG,OA5BhB,WAAwB,IAAD,EACShB,oBAAS,GADlB,mBACdiB,EADc,KACLC,EADK,OAEOlB,mBAAS,MAFhB,mBAEdmB,EAFc,KAENC,EAFM,KAqBrB,MAAO,CACLH,UACAE,SACAE,UArBgBC,uBAAY,SAACP,GAC7B,IAAMhD,EAAYC,KAAKC,MACvBiD,GAAW,GACXK,MAAMR,GAAKS,MAAK,WACdN,GAAW,GACXE,EAAU,CACRK,KAAMzD,KAAKC,MAAMF,EACjBgD,WAEDW,OAAM,SAACC,GACRC,QAAQC,IAAI,CAACF,UACbT,GAAW,GACXE,EAAU,CACRK,KAAMzD,KAAKC,MAAMF,EACjBgD,aAGJ,KAUqCe,GAA/BT,EAFM,EAENA,UAAWJ,EAFL,EAEKA,QAASE,EAFd,EAEcA,OAI5B,OACE,cAACT,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,oGACA,gPACA,cAAC2B,EAAA,EAAD,CACE3F,MAAO2E,EACPiB,YAAY,0DACZC,SAAU,SAACC,GAAD,OAAKlB,EAAOkB,EAAEC,OAAO/F,UAEjC,uBACA,cAACiE,EAAA,EAAD,CAAQE,QAfK,WACnBc,EAAUN,IAc2BqB,YAAanB,GAAYF,GAAMT,MAAM,UAAUhB,UAAU,QAAxF,6FAGC6B,GACC,qBAAI7B,UAAU,WAAd,UACE,+BAAI,qCAAJ,IAAiB6B,EAAOJ,OACxB,+BAAI,sCAAJ,IAAkBI,EAAOM,KAAzB,6BChCCY,MApBf,WAA2B,IAEjBxG,EAAkByG,qBAAWnH,GAA7BU,cAER,OACE,8BAEE,qBAAIyD,UAAU,WAAd,UACE,+BAAI,sJAA8BzD,EAAc0C,cAChD,+BAAI,6EAAiB1C,EAAc2B,WACnC,+BAAI,kKAAgC3B,EAAcuC,sBAClD,+BAAI,sDAAcvC,EAAcsC,OAChC,+BAAI,wEAAiBtC,EAAcqC,WACnC,+BAAI,mNAAyCrC,EAAcF,sBAC3D,+BAAI,kHAAwBE,EAAc2C,oBAA1C,yBC0BO+D,MArCf,WAAuB,IAAD,EACiDD,qBAAWnH,GAAxEW,EADY,EACZA,UAAWD,EADC,EACDA,cAAe4C,EADd,EACcA,eAAgBX,EAD9B,EAC8BA,eAElD,OADA8D,QAAQC,IAAIhG,GAEV,cAAC6E,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,8FACCtE,EAAYD,EACX,qCACE,6OACA,cAACwE,EAAA,EAAD,CAAQE,QAASzC,EAAgBwC,MAAM,UAAvC,8DAGA,cAAC,EAAD,OAGF,qCACE,oSACA,cAACD,EAAA,EAAD,CAAQE,QAASzC,EAAgBwC,MAAM,UAAvC,8HAKF,qCACE,gLAA+B,uBAA/B,yOACA,cAACD,EAAA,EAAD,CAAQE,QAAS9B,EAAgB6B,MAAM,UAAvC,6DCCCkC,MA1Bf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAK,IACLC,OAAK,EACLC,UAAWlC,IAEb,cAAC,IAAD,CACEgC,KAAK,cACLC,OAAK,EACLC,UAAWJ,IAEb,cAAC,IAAD,CACEE,KAAK,QACLC,OAAK,EACLC,UAAW7B,YCRR8B,G,kKATb,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,U,GAJU1D,cCKH2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.546c4201.chunk.js","sourcesContent":["import { Component, createContext } from \"react\";\nimport { SOCKET_API_URL } from \"../helpers/constants\";\n\nexport const statisticContext = createContext(null);\n\nclass StatisticProvider extends Component{\n  constructor(props){\n    super(props);\n    this.handleMessage = this.handleMessage.bind(this);\n    this.startStatistic = this.startStatistic.bind(this);\n    this.parseStatistic = this.parseStatistic.bind(this);\n  }\n\n  data = [];\n  totalSum = 0;\n  frequencyMap = new Map();\n  missed_items_count = 0;\n\n  state = {\n    statisticData: null,\n    isStarted: false,\n    socket: null,\n  }\n\n  handleMessage = (event) => {\n    const data = JSON.parse(event.data);\n    this.totalSum += data.value;\n    this.frequencyMap.set( data.value, (this.frequencyMap.get(data.value) || 1) + 1 );\n    if(this.data.length && parseInt(this.data[this.data.length-1].id)+1 !== parseInt(data.id)) this.missed_items_count++;\n    this.data.push(data);\n  }\n\n  getMediana = ()=>{\n    const sortedData = [...this.data].sort((a,b)=>a.value-b.value);\n    const middleIndex = Math.floor(sortedData.length/2);\n    const mediana = sortedData.length%2 ? (sortedData[middleIndex].value + sortedData[middleIndex+1].value)/2 : sortedData[middleIndex].value;\n    return mediana;\n  }\n\n  getMod = ()=>{\n    let res = null;\n    for(const item of this.frequencyMap.entries()){\n      if(!res || res[1] < item[1]) res = item;\n    };\n    return res?.[0] || 0;\n  }\n\n  getStandardDeviation = (average) => {\n    const sum = this.data.reduce((a,b) => a + (b.value-average)**2, 0);\n    const res = Math.sqrt(sum/this.data.length).toFixed(4);\n    return parseFloat(res);\n  }\n\n  parseStatistic = () => {\n    if(!this.data.length)return;\n    const startTime = Date.now();\n    const average = parseFloat((this.totalSum/this.data.length).toFixed(4));\n    //? Mediana\n    const mediana = this.getMediana();\n    //? Mod\n    const mod = this.getMod();\n    //? Standard Deviation\n    const standard_deviation = this.getStandardDeviation(average);\n    //? End\n    const endTime = Date.now();\n    // console.log(this.data)\n    this.setState({\n      statisticData:{\n        totalCount: this.data.length,\n        mediana,\n        mod,\n        average,\n        standard_deviation,\n        missed_items_count: this.missed_items_count,\n        time_of_calculation: endTime - startTime,\n        totalSum: this.totalSum,\n      },\n    })\n  }\n\n  startStatistic = () => {\n    this.socket = new WebSocket(SOCKET_API_URL);\n    this.socket.onopen = ()=>{\n      this.setState({\n        isStarted: true,\n      });\n    };\n    this.socket.onmessage = this.handleMessage;\n  }\n\n  render(){\n    return <statisticContext.Provider value={{\n      isStarted: this.state.isStarted,\n      socket: this.state.socket,\n      statisticData: this.state.statisticData,\n      startStatistic: this.startStatistic,\n      parseStatistic: this.parseStatistic,\n    }}>\n      {this.props.children}\n    </statisticContext.Provider>\n  }\n};\n\nexport default StatisticProvider;","export const SOCKET_API_URL = process.env.REACT_APP_SOCKET_API_URL || \"\";","import classNames from 'classnames';\nimport React from 'react'\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction Navbar() {\n  const {pathname} = useLocation();\n  return (\n    <div className=\"paper navbar\">\n      <ul className=\"nav\">\n        <li className={classNames(\"nav-item\",{ active: pathname===\"/\" })}>\n          <Link to=\"/\" className=\"nav-link\">Home</Link>\n        </li>\n        <li className={classNames(\"nav-item\",{ active: pathname===\"/statistics\" })}>\n          <Link to=\"/statistics\" className=\"nav-link\">Statistics</Link>\n        </li>\n        <li className={classNames(\"nav-item\",{ active: pathname===\"/ping\" })}>\n          <Link to=\"/ping\" className=\"nav-link\">Ping</Link>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Navbar;","import React from 'react'\nimport Navbar from './Navbar'\n\nfunction Layout({ children }) {\n  return (\n    <div className=\"layout\">\n      <Navbar/>\n      <main id=\"main\" className=\"layout__body\">\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Card, CardBody, Collapse } from 'reactstrap'\n\nfunction TasksCard({ title, subTitle, description, link}) {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n\n    <Card>\n    <CardBody>\n      <h4>{title}</h4>\n      <p>{subTitle}</p>\n      <Button color=\"success\" onClick={()=>{setIsOpen(!isOpen)}}>\n        Описание\n      </Button>\n      <br/>\n      <br/>\n      <Collapse isOpen={isOpen}>\n        {description}\n      </Collapse>\n      <Link to={link}>\n        <Button className=\"w-100\" color=\"primary\">\n          Посмотреть\n        </Button>\n      </Link>\n    </CardBody>\n  </Card>\n  )\n}\n\nexport default TasksCard\n","import React from 'react'\nimport { Col, Container, Row } from 'reactstrap'\nimport TasksCard from '../../../components/molecules/TasksCard'\n\nfunction Home() {\n  return (\n    <Container>\n      <Row>\n        <Col className=\"mb-2 mb-md-0\" md={6}>\n          <TasksCard\n            title=\"Task #1\"\n            subTitle=\"Статистика\"\n            link=\"/statistics\"\n            description={(<>\n              <p>\n                <b>Условие:</b>\n                <br/>\n                Необходимо создать веб-приложение, которое максимально быстро \n                считает статистические параметры по котировкам с биржи.<br/>\n                Для этого необходимо создать интерфейс который содержит кнопки \n                “Старт” и “Статистика”. По нажатию на “Старт” должно происходить \n                подключение к эмулятору котировок по адресу вебсокета \n                <code> wss://trade.trademux.net:8800/?password=1234 </code> для получения \n                котировок онлайн.<br/>\n                При нажатии на кнопку “Статистика” отображает \n                на странице такие статистические значения:\n                <ul className=\"def-list\">\n                  <li>среднее</li>\n                  <li>стандартное отклонение</li>\n                  <li>моду (при мультимодности достаточно только одну моду)</li>\n                  <li>медиану</li>\n                  <li>количество потерянных котировок если такие есть</li>\n                  <li>время расчетов</li>\n                </ul>\n                Расчеты должны осуществляться по всем полученным данным \n                от момента старта до текущего момента нажатия кнопки “Статистика”, \n                кнопку можно нажимать сколько угодно раз для получения новых \n                результатов на текущее время.\n                Формат “котировки” <code>json</code>, поля:<br/>\n                <code>{\"{id : id_котировки, value : значение_котировки}\"}</code>\n              </p>\n              <b>Технические требования:</b>\n              <ul className=\"def-list\">\n                <li>Приложение должно быть максимально оптимизировано по скорости работы.</li>\n                <li>Время между нажатием Старт и Статистика может быть очень большим (несколько дней)</li>\n                <li>Интерфейс должен быть удобен для использования.</li>\n                <li>Стиль полей ввода должен быть: бордер ровно 1пкс, черный, при наведении мыши на\n                поле ввода фон должен становится серым, при клике на поле фон должен становится\n                    желтым (использовать для этого только CSS / SCSS).</li>\n                <li>Принятые числа отображать не нужно.</li>\n              </ul>\n              <b>Уровни сложности задания:</b>\n              <ul className=\"def-list\">\n                <li><b>junior уровень:</b> посчитать только среднее и стандартное отклонение</li>\n                <li><b>Более высокий уровень:</b> посчитать также моду и медиану                </li>\n              </ul>\n            </>)}\n          />\n        </Col>\n        <Col md={6}>\n          <TasksCard\n            title=\"Task #2\"\n            subTitle=\"Пингователь\"\n            link=\"/ping\"\n            description={(<>\n              <p>\n                <b>Условие</b>:\n                Написать \"пингователь\" любого сервера на JavaScript,\n                который покажет примерное время пинга до сервера\n                указанного в поле ввода.\n              </p>\n              <b>Технические требования:</b>\n              <ul className=\"def-list\">\n                <li>Стиль полей ввода должен быть: бордер ровно 1пкс, черный, при наведении мыши на\n                поле ввода фон должен становится серым, при клике на поле фон должен становится\n                  желтым (использовать для этого только CSS / SCSS).</li>\n              </ul>\n            </>)}\n          />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Home\n","import React, { useCallback, useState } from 'react'\nimport { Card, CardBody, Container, Input, Button } from 'reactstrap'\n\nfunction useCheckPing(){\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const checkPing = useCallback((url)=>{\n    const startTime = Date.now();\n    setLoading(true);\n    fetch(url).then(()=>{\n      setLoading(false);\n      setResult({\n        ping: Date.now()-startTime,\n        url,\n      });\n    }).catch((error)=>{\n      console.log({error});\n      setLoading(false);\n      setResult({\n        ping: Date.now()-startTime,\n        url,\n      });\n    });\n  },[]);\n  return {\n    loading,\n    result,\n    checkPing,\n  }\n}\n\nfunction Ping() {\n  const [url,setUrl] = useState(\"\");\n  const { checkPing, loading, result } = useCheckPing();\n  const handleSubmit = ()=>{\n    checkPing(url);\n  }\n  return (\n    <Container>\n      <Card>\n        <CardBody>\n          <h3>Пингователь</h3>\n          <p>Введите адрес сервера чтобы проверить PING</p>\n          <Input\n            value={url}\n            placeholder=\"Вставьте URL...\"\n            onChange={(e)=>setUrl(e.target.value)}\n          />\n          <br/>\n          <Button onClick={handleSubmit} disabled={!!(loading || !url)} color=\"primary\" className=\"w-100\">\n            Проверить пинг\n          </Button>\n          {result && (\n            <ul className=\"def-list\">\n              <li><b>URL:</b> {result.url}</li>\n              <li><b>PING:</b> {result.ping}мс</li>\n            </ul>\n          )}\n        </CardBody>\n      </Card>\n    </Container>\n  )\n}\n\nexport default Ping\n","import React, { useContext } from 'react'\nimport { statisticContext } from '../../../contexts/statistic.context';\n\nfunction StatisticsData() {\n\n  const { statisticData } = useContext(statisticContext);;\n\n  return (\n    <div>\n\n      <ul className=\"def-list\">\n        <li><b>Количество котировок: </b>{statisticData.totalCount}</li>\n        <li><b>Среднее: </b>{statisticData.average}</li>\n        <li><b>Стандартное отклонение: </b>{statisticData.standard_deviation}</li>\n        <li><b>Модa: </b>{statisticData.mod}</li>\n        <li><b>Медианa: </b>{statisticData.mediana}</li>\n        <li><b>Количество потерянных котировок: </b>{statisticData.missed_items_count}</li>\n        <li><b>Время расчетов: </b>{statisticData.time_of_calculation}мс.</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default StatisticsData\n","import { Button } from 'reactstrap'\nimport React, { useContext } from 'react'\nimport { Card, CardBody, Container } from 'reactstrap'\nimport StatisticsData from './StatisticsData'\nimport { statisticContext } from '../../../contexts/statistic.context'\n\nfunction Statistics() {\n  const { isStarted, statisticData, startStatistic, parseStatistic } = useContext(statisticContext);\n  console.log(statisticData)\n  return (\n    <Container>\n      <Card>\n        <CardBody>\n          <h3>Статистика</h3>\n          {isStarted ? statisticData ? (\n            <>\n              <p>Нажите \"Обновить\" чтобы обновить данные</p>\n              <Button onClick={parseStatistic} color=\"primary\">\n                Обновить\n              </Button>\n              <StatisticsData/>\n            </>\n          ) : (\n            <>\n              <p>Нажите \"Показать статистику\" чтобы увидеть данные</p>\n              <Button onClick={parseStatistic} color=\"primary\">\n                Показать статистику\n              </Button>\n            </>\n          ) : (\n            <>\n              <p>Пока что нет никаких данных.<br/>Нажите начать чтобы начать собирать данные</p>\n              <Button onClick={startStatistic} color=\"primary\">\n                Начать\n              </Button>\n            </>\n          )}\n        </CardBody>\n      </Card>\n    </Container>\n  )\n}\n\nexport default Statistics\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Layout from '../components/layout/Layout'\nimport Home from './pages/Home/Home'\nimport Ping from './pages/Ping/Ping'\nimport Statistics from './pages/Statistics/Statistics'\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            component={Home}\n          />\n          <Route\n            path=\"/statistics\"\n            exact\n            component={Statistics}\n          />\n          <Route\n            path=\"/ping\"\n            exact\n            component={Ping}\n          />\n        </Switch>\n      </Layout>\n    </BrowserRouter>\n  )\n}\n\nexport default Router\n","import React, { Component } from \"react\";\nimport StatisticProvider from \"./contexts/statistic.context\";\nimport Router from \"./routes/Router\";\n\n// import './App.css'\nimport './assets/scss/app.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <StatisticProvider>\n        <Router/>\n      </StatisticProvider>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}